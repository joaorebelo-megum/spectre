# Distributed under the MIT License.
# See LICENSE.txt for details.

# Adds an executable by wrapping CMake's 'add_executable' but allows
# us to inject dependencies, flags, etc. into the targets.
function(add_spectre_executable TARGET_NAME)
  add_executable(${TARGET_NAME} ${ARGN})
  # We need to link custom allocators before we link anything else so that
  # any third-party libraries, which generally should all be built as shared
  # libraries, use the allocator that we use. Unfortunately, how exactly
  # CMake decides on the linking order is not clear when using
  # INTERFACE_LINK_LIBRARIES and targets. To this end, we set a global
  # property SPECTRE_ALLOCATOR_LIBRARY that contains the link flag to link
  # to the memory allocator. By linking to the allocator library first
  # explicitly in target_link_libraries CMake correctly places the allocator
  # library as the first entry in the link libraries. We also link to the
  # SpectreAllocator target to pull in any additional allocator-related
  # flags, such as include directories.
  get_property(
    SPECTRE_ALLOCATOR_LIBRARY
    GLOBAL
    PROPERTY SPECTRE_ALLOCATOR_LIBRARY
    )
  target_link_libraries(
    ${TARGET_NAME}
    PUBLIC
    ${SPECTRE_ALLOCATOR_LIBRARY}
    SpectreAllocator
  )

  set(SPECTRE_KOKKOS_LAUNCHER "")
  if(SPECTRE_KOKKOS)
    # We need to make sure we don't drop the Kokkos link wrapper
    get_target_property(
      _RULE_LAUNCH_LINK
      ${TARGET_NAME}
      RULE_LAUNCH_LINK)
    if (_RULE_LAUNCH_LINK)
      set(SPECTRE_KOKKOS_LAUNCHER ${_RULE_LAUNCH_LINK})
    endif()
  endif()
  set_target_properties(
    ${TARGET_NAME}
    PROPERTIES
    RULE_LAUNCH_LINK
    "${CMAKE_BINARY_DIR}/tmp/WrapExecutableLinker.sh ${SPECTRE_KOKKOS_LAUNCHER}"
    LINK_DEPENDS "${CMAKE_BINARY_DIR}/tmp/WrapExecutableLinker.sh"
    # Expose readable symbol names in backtrace (adds flags like -rdynamic)
    ENABLE_EXPORTS ON
    )
  target_link_options(${TARGET_NAME} PRIVATE "-DEXECUTABLE_NAME=${TARGET_NAME}")
  # The `WrapExecutableLinker.sh` script needs the `InfoAtLink_flags.txt` file
  # generated by the `InfoAtLink` target
  add_dependencies(
    ${TARGET_NAME}
    InfoAtLink
    )
  target_link_libraries(
    ${TARGET_NAME}
    PRIVATE
    CharmModuleInit
    SpectreFlags
    )
  install(TARGETS ${TARGET_NAME} OPTIONAL
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
endfunction()
